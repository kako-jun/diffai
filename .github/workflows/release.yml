name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Create Release
      id: create_release
      run: |
        # Extract tag name from ref
        TAG_NAME=${GITHUB_REF#refs/tags/}
        
        # Create release and capture output
        gh release create "$TAG_NAME" \
          --title "Release $TAG_NAME" \
          --notes "Changes in this Release
        - First Change  
        - Second Change" \
          --draft=false \
          --prerelease=false
        
        # Get release ID for outputs
        RELEASE_ID=$(gh api repos/${{ github.repository }}/releases/tags/$TAG_NAME --jq '.id')
        echo "id=$RELEASE_ID" >> $GITHUB_OUTPUT
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-release:
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: diffai
            asset_name: diffai-linux-x86_64.tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: diffai.exe
            asset_name: diffai-windows-x86_64.zip
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: diffai
            asset_name: diffai-macos-x86_64.tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: diffai
            asset_name: diffai-macos-arm64.tar.gz

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
        
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      
    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}
      
    - name: Create archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        tar -czf ../../../${{ matrix.asset_name }} ${{ matrix.binary_name }}
        
    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        7z a ../../../${{ matrix.asset_name }} ${{ matrix.binary_name }}
        
    - name: Upload Release Asset
      run: |
        # Extract tag name from ref
        TAG_NAME=${GITHUB_REF#refs/tags/}
        
        # Upload asset to release
        gh release upload "$TAG_NAME" "${{ matrix.asset_name }}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-crates:
    needs: build-release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      
    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CRATES_TOKEN }}
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_TOKEN }}